{"version":3,"sources":["components/card/card.component.jsx","components/card-lists/card-lists.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","person","id","name","email","phone","address","city","CardList","persons","map","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchFieldByName","searchFieldByPhone","fetch","then","response","json","users","setState","this","filteredpersons","filter","toLowerCase","includes","replace","e","target","value","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6TAIaA,G,YAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,OAAOC,GAAvC,4BACrB,4BAAKL,EAAMI,OAAOE,MAClB,+BACI,4BACI,uCAAgB,gCAAMN,EAAMI,OAAOG,MAAnB,MAEpB,4BACI,uCAAgB,gCAAMP,EAAMI,OAAOI,QAEvC,4BACI,sCAAe,gCAAMR,EAAMI,OAAOK,QAAQC,WCV7CC,G,MAAW,SAAAX,GAAK,OACzB,yBAAKC,UAAU,aACVD,EAAMY,QAAQC,KAAI,SAAAT,GAAM,OACrB,kBAAC,EAAD,CAAMU,IAAKV,EAAOC,GAAID,OAAQA,UCL7BW,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BAAOC,KAAK,SACRjB,UAAY,SACZe,YAAaA,EACbG,SAAUF,MCiDHG,E,kDAlDb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXT,QAAS,GACTU,kBAAmB,GACnBC,mBAAoB,IANV,E,gEAUM,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACjB,QAASgB,S,+BAGhC,IAAD,SAEqDE,KAAKT,MAAxDT,EAFF,EAEEA,QAASU,EAFX,EAEWA,kBAAoBC,EAF/B,EAE+BA,mBAE/BQ,EAAkBnB,EAAQoB,QAAO,SAAApB,GAAO,OAC1CA,EAAQN,KAAK2B,cAAcC,SAASZ,EAAkBW,gBACrDrB,EAAQJ,MAAM2B,QAAQ,KAAK,IAAID,SAASX,MAK7C,OAEA,yBAAKtB,UAAU,OACb,kDACA,kBAAC,EAAD,CACEe,YAAY,gBACZC,aAAc,SAAAmB,GAAM,EAAKP,SAAS,CAAEP,kBAAmBc,EAAEC,OAAOC,QAAQ,kBACtEC,QAAQC,IAAI,EAAKnB,aALvB,sBASE,kBAAC,EAAD,CACEL,YAAY,kBACZC,aAAc,SAAAmB,GAAM,EAAKP,SAAS,CAAEN,mBAAoBa,EAAEC,OAAOC,QAAQ,kBACvEC,QAAQC,IAAI,EAAKnB,aAGnB,kBAAC,EAAD,CAAUT,QAASmB,S,GA9CTU,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.7cccdd36.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.component.css';\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img alt=\"person\" src={`https://robohash.org/${props.person.id}?set=set5&size=200x180`}/>\r\n        <h3>{props.person.name}</h3>\r\n        <table>\r\n            <tr>\r\n                <th>Email: </th><td> {props.person.email} </td>\r\n            </tr>\r\n            <tr>\r\n                <th>Phone: </th><td> {props.person.phone}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>City: </th><td> {props.person.address.city}</td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-lists.sytles.css';\r\n\r\nexport const CardList = props => (\r\n    <div className='card-list'>\r\n        {props.persons.map(person => (\r\n            <Card key={person.id} person={person}/>\r\n        ))}\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input type='search'\r\n        className = 'search'\r\n        placeholder={placeholder} \r\n        onChange={handleChange}\r\n      />\r\n);","import React, { Component}  from 'react';\nimport './App.css';\nimport { CardList } from './components/card-lists/card-lists.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n\n  constructor (){\n    super();\n\n    this.state = {\n      persons: [],\n      searchFieldByName: '',\n      searchFieldByPhone: ''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({persons: users}))\n  }\n\n  render(){\n\n    const { persons, searchFieldByName , searchFieldByPhone} = this.state;\n\n    const filteredpersons = persons.filter(persons => (\n        persons.name.toLowerCase().includes(searchFieldByName.toLowerCase()) &&\n        (persons.phone.replace(/-/g,'').includes(searchFieldByPhone)))\n        ); \n\n    \n\n    return (\n      \n    <div className=\"App\">\n      <h1>Personal Directory</h1>\n      <SearchBox\n        placeholder='Search Person'\n        handleChange={e => {this.setState({ searchFieldByName: e.target.value}, () => \n          console.log(this.state));          \n        }}\n      />\n      &nbsp; &nbsp; &nbsp; &nbsp;\n      <SearchBox\n        placeholder=\"Search by Phone\"\n        handleChange={e => {this.setState({ searchFieldByPhone: e.target.value}, () => \n          console.log(this.state));          \n        }}\n      />\n        <CardList persons={filteredpersons}/>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https:// bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}